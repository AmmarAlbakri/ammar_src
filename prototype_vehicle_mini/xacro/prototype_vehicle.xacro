<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro"  name="prototype_vehicle_mini">

<!--     <xacro:include filename="$(find prototype_vehicle_mini)/xacro/colors.xacro" /> -->
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/sase.xacro" />
    <!-- <xacro:include filename="$(find prototype_vehicle_mini)/xacro/sol_teker.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/sag_teker.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/arka_sag_sarhos_teker.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/arka_sag_sarhos_teker_plakasi.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/arka_sol_sarhos_teker.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/arka_sol_sarhos_teker_plakasi.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/on_sag_sarhos_teker.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/on_sag_sarhos_teker_plakasi.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/on_sol_sarhos_teker.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/on_sol_sarhos_teker_plakasi.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/kirmizi_lidar.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/mavi_lidar.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/virtual_laser.xacro" />
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/imu.xacro" /> -->
    <xacro:include filename="$(find prototype_vehicle_mini)/xacro/mir_caster_wheels.xacro" />
 
    <link name="base_footprint">    
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.0" length="0.0"/>
            </geometry>
            <material name="Yellow">
                <color rgba="1 1 0 1"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.0" length="0.0"/>
            </geometry>
        </collision>
    </link>

    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
            <controlPeriod>0.001</controlPeriod> 
            <legacyModeNS>false</legacyModeNS>  
        </plugin>
        
        <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
            <rosDebugLevel>Debug</rosDebugLevel>                <!-- <rosDebugLevel>Debug</rosDebugLevel> -->
            <updateRate>1000</updateRate>                       <!-- Plugin update rate in Hz -->
            <alwaysOn>true</alwaysOn>
            <leftJoint>sol_teker_joint</leftJoint>              <!-- Name of left joint, defaults to `left_joint` -->
            <rightJoint>sag_teker_joint</rightJoint>            <!-- Name of right joint, defaults to `right_joint` -->
            <wheelSeparation>0.47</wheelSeparation>             <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
            <wheelDiameter>0.16</wheelDiameter>                 <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
            <wheelAcceleration>0.5</wheelAcceleration>          <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
            <wheelTorque>50</wheelTorque>                       <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
            <commandTopic>cmd_vel</commandTopic>                <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
            <odometryTopic>odom</odometryTopic>                 <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
            <odometryFrame>map</odometryFrame>                  <!-- Odometry frame, defaults to `odom` -->
            <robotBaseFrame>base_footprint</robotBaseFrame>     <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
            <odometrySource>world</odometrySource>              <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
            <publishWheelTF>false</publishWheelTF>              <!-- Set to true to publish transforms for the wheel links, defaults to false -->
            <publishOdom>true</publishOdom>                     <!-- Set to true to publish transforms for the odometry, defaults to true -->
            <publishOdomTF>true</publishOdomTF>
            <publishTf>true</publishTf>
            <publishWheelJointState>true</publishWheelJointState>   <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
            <legacyMode>false</legacyMode>                      <!-- Set to true to swap right and left wheels, defaults to true -->
        </plugin>

        <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
            <alwaysOn>true</alwaysOn>
            <bodyName>base_footprint</bodyName>
            <topicName>imu</topicName>
            <serviceName>imu_service</serviceName>
            <gaussianNoise>0.0</gaussianNoise>
            <updateRate>20.0</updateRate>
        </plugin>

    </gazebo>
</robot>
